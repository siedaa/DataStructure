#include<iostream>
using namespace std;

bool isSafe (int ** board , int x , int y , int n) {
    if (x <n && y <n && board[x][y] ==1 )
 {
    return true;
 }
 else return false;
}


bool robot (int ** board , int x , int y , int n , int**solArry) {
    if (x== (n-1) && y== (n-1) ) {
        solArry[x][y] =1;
        return true;
        
    }

    if (isSafe (board , x , y , n)) {
        solArry[x][y]=1;
        if (robot(board , x+1, y , n , solArry)) {
            return true;
        }

        else if (robot (board  , x ,y+1 , n , solArry) ) {
            return true;
        }

        else {
            solArry[x][y]=0;  //backtracking heree
            return false;
        }
        return false;
    }

}
    int main () {
        int n= 4;
        int ** board = new int *[n];
        for (int i=0;i<n;i++) {
            board[i] = new int [n];
        }
        int temp[4][4] = {
            1 , 0 , 1 ,1,
            1 ,1 , 0 ,0,
            0 , 1 ,1 , 1,
            1 , 0 , 1 , 1
        };

        for (int i=0;i<n;i++) {
            for (int j=0;j<n;j++) {
                board[i][j] = temp[i][j];
            }
        }
      
        
        int ** solArry = new int*[n];
        for (int i=0;i<n;i++) {
            solArry[i] = new int [n];
            for (int j=0;j<n;j++) {
                solArry[i][j] =0;
            }
        }

        if (robot (board ,  0, 0 , n , solArry)) {
            for (int i=0;i<n;i++) {
                for (int j=0;j<n;j++) {
                    cout<<solArry[i][j]<<" ";
                }
                cout<<endl;
            }
        }

for (int i = 0; i < n; i++) {
        delete[] board[i];
        delete[] solArry[i];
    }
    delete[] board;
    delete[] solArry;
    }
