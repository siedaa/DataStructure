#include <iostream>
using namespace std;

// Function to get maximum value
int getMax(int arr[], int n) {
    int mx = arr[0];
    for (int i = 1; i < n; i++)
        if (arr[i] > mx)
            mx = arr[i];
    return mx;
}

// Counting sort for Radix (Stable)
void countingSort(int arr[], int n, int exp) {
    int output[n]; // Temp output array
    int count[10] = {0};

    // Count occurrences of digits
    for (int i = 0; i < n; i++)
        count[(arr[i] / exp) % 10]++;

    // Convert count to prefix sum for stable sorting
    for (int i = 1; i < 10; i++)
        count[i] += count[i - 1];

    // Build output array (RIGHT TO LEFT to maintain stability)
    for (int i = n - 1; i >= 0; i--) {
        int digit = (arr[i] / exp) % 10;
        output[count[digit] - 1] = arr[i];
        count[digit]--;
    }

    // Copy back to original array
    for (int i = 0; i < n; i++)
        arr[i] = output[i];
}

// Radix Sort
void radixSort(int arr[], int n) {
    int maxVal = getMax(arr, n);
    for (int exp = 1; maxVal / exp > 0; exp *= 10)
        countingSort(arr, n, exp);
}

int main() {
    int transactions[] = {350, 1200, 75, 500, 1200, 999, 40, 75};
    int n = sizeof(transactions) / sizeof(transactions[0]);

    cout << "Original Transaction Amounts:\n";
    for (int i = 0; i < n; i++)
        cout << transactions[i] << " ";
    cout << endl;

    radixSort(transactions, n);

    cout << "\nSorted Transaction Amounts (Ascending):\n";
    for (int i = 0; i < n; i++)
        cout << transactions[i] << " ";
    cout << endl;

    return 0;
}
